
AVRflash.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e3       	ldi	r30, 0x3E	; 62
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	55 d0       	rcall	.+170    	; 0x104 <main>
  5a:	ef c0       	rjmp	.+478    	; 0x23a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <odDebug>:
    uartPutc(hexAscii(c >> 4));
    uartPutc(hexAscii(c));
}

void    odDebug(uchar prefix, uchar *data, uchar len)
{
  5e:	fb 01       	movw	r30, r22
    return h;
}

static void printHex(uchar c)
{
    uartPutc(hexAscii(c >> 4));
  60:	98 2f       	mov	r25, r24
  62:	92 95       	swap	r25
  64:	9f 70       	andi	r25, 0x0F	; 15
}

static uchar    hexAscii(uchar h)
{
    h &= 0xf;
    if(h >= 10)
  66:	9a 30       	cpi	r25, 0x0A	; 10
  68:	08 f0       	brcs	.+2      	; 0x6c <odDebug+0xe>
        h += 'a' - (uchar)10 - '0';
  6a:	99 5d       	subi	r25, 0xD9	; 217

#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <odDebug+0xe>
static uchar    hexAscii(uchar h)
{
    h &= 0xf;
    if(h >= 10)
        h += 'a' - (uchar)10 - '0';
    h += '0';
  70:	90 5d       	subi	r25, 0xD0	; 208
#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
    ODDBG_UDR = c;
  72:	9c b9       	out	0x0c, r25	; 12
}

static uchar    hexAscii(uchar h)
{
    h &= 0xf;
  74:	8f 70       	andi	r24, 0x0F	; 15
    if(h >= 10)
  76:	8a 30       	cpi	r24, 0x0A	; 10
  78:	08 f0       	brcs	.+2      	; 0x7c <odDebug+0x1e>
        h += 'a' - (uchar)10 - '0';
  7a:	89 5d       	subi	r24, 0xD9	; 217

#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <odDebug+0x1e>
static uchar    hexAscii(uchar h)
{
    h &= 0xf;
    if(h >= 10)
        h += 'a' - (uchar)10 - '0';
    h += '0';
  80:	80 5d       	subi	r24, 0xD0	; 208
#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
    ODDBG_UDR = c;
  82:	8c b9       	out	0x0c, r24	; 12

#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
  84:	5d 9b       	sbis	0x0b, 5	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <odDebug+0x26>
    ODDBG_UDR = c;
  88:	8a e3       	ldi	r24, 0x3A	; 58
  8a:	8c b9       	out	0x0c, r24	; 12
  8c:	20 e2       	ldi	r18, 0x20	; 32
  8e:	19 c0       	rjmp	.+50     	; 0xc2 <odDebug+0x64>

#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <odDebug+0x32>
    ODDBG_UDR = c;
  94:	2c b9       	out	0x0c, r18	; 12
{
    printHex(prefix);
    uartPutc(':');
    while(len--){
        uartPutc(' ');
        printHex(*data++);
  96:	90 81       	ld	r25, Z
    return h;
}

static void printHex(uchar c)
{
    uartPutc(hexAscii(c >> 4));
  98:	89 2f       	mov	r24, r25
  9a:	82 95       	swap	r24
  9c:	8f 70       	andi	r24, 0x0F	; 15
}

static uchar    hexAscii(uchar h)
{
    h &= 0xf;
    if(h >= 10)
  9e:	8a 30       	cpi	r24, 0x0A	; 10
  a0:	08 f0       	brcs	.+2      	; 0xa4 <odDebug+0x46>
        h += 'a' - (uchar)10 - '0';
  a2:	89 5d       	subi	r24, 0xD9	; 217

#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <odDebug+0x46>
static uchar    hexAscii(uchar h)
{
    h &= 0xf;
    if(h >= 10)
        h += 'a' - (uchar)10 - '0';
    h += '0';
  a8:	80 5d       	subi	r24, 0xD0	; 208
#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
    ODDBG_UDR = c;
  aa:	8c b9       	out	0x0c, r24	; 12
}

static uchar    hexAscii(uchar h)
{
    h &= 0xf;
  ac:	89 2f       	mov	r24, r25
  ae:	8f 70       	andi	r24, 0x0F	; 15
    if(h >= 10)
  b0:	8a 30       	cpi	r24, 0x0A	; 10
  b2:	08 f0       	brcs	.+2      	; 0xb6 <odDebug+0x58>
        h += 'a' - (uchar)10 - '0';
  b4:	89 5d       	subi	r24, 0xD9	; 217

#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <odDebug+0x58>
{
    printHex(prefix);
    uartPutc(':');
    while(len--){
        uartPutc(' ');
        printHex(*data++);
  ba:	31 96       	adiw	r30, 0x01	; 1
static uchar    hexAscii(uchar h)
{
    h &= 0xf;
    if(h >= 10)
        h += 'a' - (uchar)10 - '0';
    h += '0';
  bc:	80 5d       	subi	r24, 0xD0	; 208
#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
    ODDBG_UDR = c;
  be:	8c b9       	out	0x0c, r24	; 12
  c0:	41 50       	subi	r20, 0x01	; 1

void    odDebug(uchar prefix, uchar *data, uchar len)
{
    printHex(prefix);
    uartPutc(':');
    while(len--){
  c2:	44 23       	and	r20, r20
  c4:	29 f7       	brne	.-54     	; 0x90 <odDebug+0x32>

#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
  c6:	5d 9b       	sbis	0x0b, 5	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <odDebug+0x68>
    ODDBG_UDR = c;
  ca:	8d e0       	ldi	r24, 0x0D	; 13
  cc:	8c b9       	out	0x0c, r24	; 12

#warning "Never compile production devices with debugging enabled"

static void uartPutc(char c)
{
    while(!(ODDBG_USR & (1 << ODDBG_UDRE)));    /* wait for data register empty */
  ce:	5d 9b       	sbis	0x0b, 5	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <odDebug+0x70>
    ODDBG_UDR = c;
  d2:	8a e0       	ldi	r24, 0x0A	; 10
  d4:	8c b9       	out	0x0c, r24	; 12
        uartPutc(' ');
        printHex(*data++);
    }
    uartPutc('\r');
    uartPutc('\n');
}
  d6:	08 95       	ret

000000d8 <analogWrite>:

#define FS (FINT/2)
// FS = 15625Hz @F_CPU16MHz

void analogWrite(int val)
{
  d8:	9c 01       	movw	r18, r24
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  // OC1A is Timer for FLASH_LED

  if (val == 0) {
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	29 f4       	brne	.+10     	; 0xe8 <analogWrite+0x10>
    // disconnect pin from timer
    cbi(TCCR1A, COM1A1);
  de:	8f b5       	in	r24, 0x2f	; 47
  e0:	8f 77       	andi	r24, 0x7F	; 127
  e2:	8f bd       	out	0x2f, r24	; 47
    // set low
    cbi(FLASH_LED_PORT,FLASH_LED);
  e4:	c1 98       	cbi	0x18, 1	; 24
  e6:	08 95       	ret
  }
  else if (val == 255) {
  e8:	8f 3f       	cpi	r24, 0xFF	; 255
  ea:	91 05       	cpc	r25, r1
  ec:	29 f4       	brne	.+10     	; 0xf8 <analogWrite+0x20>
    // disconnect pin from timer
    cbi(TCCR1A, COM1A1);
  ee:	8f b5       	in	r24, 0x2f	; 47
  f0:	8f 77       	andi	r24, 0x7F	; 127
  f2:	8f bd       	out	0x2f, r24	; 47
    // set high
    sbi(FLASH_LED_PORT,FLASH_LED);
  f4:	c1 9a       	sbi	0x18, 1	; 24
  f6:	08 95       	ret
  }
  else {
    // connect pwm to pin on timer 1
    sbi(TCCR1A, COM1A1);
  f8:	8f b5       	in	r24, 0x2f	; 47
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	8f bd       	out	0x2f, r24	; 47
    OCR1A = val; // set pwm duty
  fe:	3b bd       	out	0x2b, r19	; 43
 100:	2a bd       	out	0x2a, r18	; 42
 102:	08 95       	ret

00000104 <main>:
  }
}

int main(void) {
 104:	4f 92       	push	r4
 106:	5f 92       	push	r5
 108:	6f 92       	push	r6
 10a:	7f 92       	push	r7
 10c:	8f 92       	push	r8
 10e:	9f 92       	push	r9
 110:	af 92       	push	r10
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	00 d0       	rcall	.+0      	; 0x126 <main+0x22>
 126:	00 d0       	rcall	.+0      	; 0x128 <main+0x24>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
  // this provides a heartbeat on pin 9, so you can tell the software is running.
  uint8_t hbval=128;
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	89 83       	std	Y+1, r24	; 0x01
  int8_t hbdelta=8;
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t osc = 0;
  uint8_t c = 0;
 134:	1c 82       	std	Y+4, r1	; 0x04
  sei();
 136:	78 94       	sei
  /* set LED pin as output */
  sbi(FLASH_LED_DDR,FLASH_LED);
 138:	b9 9a       	sbi	0x17, 1	; 23
  sbi(FLASH_LED_DDR,FLASH_LED1);
 13a:	ba 9a       	sbi	0x17, 2	; 23
  osc = OSCCAL;
 13c:	81 b7       	in	r24, 0x31	; 49
 13e:	8b 83       	std	Y+3, r24	; 0x03


static inline void  odDebugInit(void)
{
  /* enable sender */
  ODDBG_UCR |= (1<<ODDBG_TXEN);
 140:	53 9a       	sbi	0x0a, 3	; 10
  /* enable receiver */
  ODDBG_UCR |= (1<<ODDBG_RXEN);
 142:	54 9a       	sbi	0x0a, 4	; 10
  /* set baud rate */
  ODDBG_UBRR = F_CPU / (19200 * 16L) - 1;
 144:	89 e1       	ldi	r24, 0x19	; 25
 146:	89 b9       	out	0x09, r24	; 9
  odDebugInit();
  DBG1(0x01,&osc,1);
 148:	8e 01       	movw	r16, r28
 14a:	0d 5f       	subi	r16, 0xFD	; 253
 14c:	1f 4f       	sbci	r17, 0xFF	; 255
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	b8 01       	movw	r22, r16
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	84 df       	rcall	.-248    	; 0x5e <odDebug>

  TCCR1B = 0;
 156:	1e bc       	out	0x2e, r1	; 46
  // set timer 1 prescale factor to 64
  sbi(TCCR1B, CS11);
 158:	8e b5       	in	r24, 0x2e	; 46
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	8e bd       	out	0x2e, r24	; 46
  sbi(TCCR1B, CS10);
 15e:	8e b5       	in	r24, 0x2e	; 46
 160:	81 60       	ori	r24, 0x01	; 1
 162:	8e bd       	out	0x2e, r24	; 46
  // put timer 1 in 8-bit phase correct pwm mode
  sbi(TCCR1A, WGM10);
 164:	8f b5       	in	r24, 0x2f	; 47
 166:	81 60       	ori	r24, 0x01	; 1
 168:	8f bd       	out	0x2f, r24	; 47
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16a:	48 ec       	ldi	r20, 0xC8	; 200
 16c:	84 2e       	mov	r8, r20
 16e:	91 2c       	mov	r9, r1
    _delay_ms(40);
    if ( !(UCSRA & (1<<RXC))) {
      goto JB;
    }
    c = UDR;
    DBG1(0x03,&c,1);
 170:	34 e0       	ldi	r19, 0x04	; 4
 172:	a3 2e       	mov	r10, r19
 174:	b1 2c       	mov	r11, r1
 176:	ac 0e       	add	r10, r28
 178:	bd 1e       	adc	r11, r29
      hbdelta=0;
    } else if ( c == 'd' ) {
      hbval=128;
      hbdelta=8;
    } else if ( c == 'o' ) {
      hbval=254;
 17a:	2e ef       	ldi	r18, 0xFE	; 254
 17c:	42 2e       	mov	r4, r18
      hbdelta=0;
    } else if ( c == '1' ) {
      hbval=255;
      hbdelta=0;
    } else if ( c == 'd' ) {
      hbval=128;
 17e:	90 e8       	ldi	r25, 0x80	; 128
 180:	59 2e       	mov	r5, r25
      hbdelta=8;
 182:	88 e0       	ldi	r24, 0x08	; 8
 184:	68 2e       	mov	r6, r24
      osc--;
    } else if ( c == '0' ) {
      hbval=0;
      hbdelta=0;
    } else if ( c == '1' ) {
      hbval=255;
 186:	77 24       	eor	r7, r7
 188:	7a 94       	dec	r7
    } else if ( c == 'o' ) {
      hbval=254;
      hbdelta=0;
    }
    OSCCAL = osc;
    DBG1(0x11,&osc,1);
 18a:	68 01       	movw	r12, r16
    DBG1(0x12,&hbval,1);
 18c:	7e 01       	movw	r14, r28
 18e:	08 94       	sec
 190:	e1 1c       	adc	r14, r1
 192:	f1 1c       	adc	r15, r1
    DBG1(0x13,&hbdelta,1);
 194:	8e 01       	movw	r16, r28
 196:	0e 5f       	subi	r16, 0xFE	; 254
 198:	1f 4f       	sbci	r17, 0xFF	; 255
  sbi(TCCR1B, CS10);
  // put timer 1 in 8-bit phase correct pwm mode
  sbi(TCCR1A, WGM10);

  while (1) {
    DBG1(0x02,0,0);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	5d df       	rcall	.-326    	; 0x5e <odDebug>
  JB:
    //sbi(FLASH_LED_PORT,FLASH_LED);
    //cbi(FLASH_LED_PORT,FLASH_LED);
    //asm("nop\n");
    if (hbval > 192) hbdelta = -hbdelta;
 1a4:	99 81       	ldd	r25, Y+1	; 0x01
 1a6:	91 3c       	cpi	r25, 0xC1	; 193
 1a8:	18 f0       	brcs	.+6      	; 0x1b0 <main+0xac>
 1aa:	8a 81       	ldd	r24, Y+2	; 0x02
 1ac:	81 95       	neg	r24
 1ae:	8a 83       	std	Y+2, r24	; 0x02
    if (hbval < 32) hbdelta = -hbdelta;
 1b0:	90 32       	cpi	r25, 0x20	; 32
 1b2:	18 f4       	brcc	.+6      	; 0x1ba <main+0xb6>
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	81 95       	neg	r24
 1b8:	8a 83       	std	Y+2, r24	; 0x02
    hbval += hbdelta;
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	89 0f       	add	r24, r25
 1be:	89 83       	std	Y+1, r24	; 0x01
    analogWrite(hbval);
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	8a df       	rcall	.-236    	; 0xd8 <analogWrite>
 1c4:	80 e9       	ldi	r24, 0x90	; 144
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	f4 01       	movw	r30, r8
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0xc6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d0:	d9 f7       	brne	.-10     	; 0x1c8 <main+0xc4>
    _delay_ms(40);
    if ( !(UCSRA & (1<<RXC))) {
 1d2:	5f 9b       	sbis	0x0b, 7	; 11
 1d4:	e7 cf       	rjmp	.-50     	; 0x1a4 <main+0xa0>
      goto JB;
    }
    c = UDR;
 1d6:	8c b1       	in	r24, 0x0c	; 12
 1d8:	8c 83       	std	Y+4, r24	; 0x04
    DBG1(0x03,&c,1);
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	b5 01       	movw	r22, r10
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	3e df       	rcall	.-388    	; 0x5e <odDebug>
    if ( c == '+' ) {
 1e2:	8c 81       	ldd	r24, Y+4	; 0x04
 1e4:	8b 32       	cpi	r24, 0x2B	; 43
 1e6:	19 f4       	brne	.+6      	; 0x1ee <main+0xea>
      osc++;
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <main+0xf2>
    } else if ( c == '-' ) {
 1ee:	8d 32       	cpi	r24, 0x2D	; 45
 1f0:	21 f4       	brne	.+8      	; 0x1fa <main+0xf6>
      osc--;
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	8b 83       	std	Y+3, r24	; 0x03
 1f8:	11 c0       	rjmp	.+34     	; 0x21c <main+0x118>
    } else if ( c == '0' ) {
 1fa:	80 33       	cpi	r24, 0x30	; 48
 1fc:	11 f4       	brne	.+4      	; 0x202 <main+0xfe>
      hbval=0;
 1fe:	19 82       	std	Y+1, r1	; 0x01
 200:	0c c0       	rjmp	.+24     	; 0x21a <main+0x116>
      hbdelta=0;
    } else if ( c == '1' ) {
 202:	81 33       	cpi	r24, 0x31	; 49
 204:	11 f4       	brne	.+4      	; 0x20a <main+0x106>
      hbval=255;
 206:	79 82       	std	Y+1, r7	; 0x01
 208:	08 c0       	rjmp	.+16     	; 0x21a <main+0x116>
      hbdelta=0;
    } else if ( c == 'd' ) {
 20a:	84 36       	cpi	r24, 0x64	; 100
 20c:	19 f4       	brne	.+6      	; 0x214 <main+0x110>
      hbval=128;
 20e:	59 82       	std	Y+1, r5	; 0x01
      hbdelta=8;
 210:	6a 82       	std	Y+2, r6	; 0x02
 212:	04 c0       	rjmp	.+8      	; 0x21c <main+0x118>
    } else if ( c == 'o' ) {
 214:	8f 36       	cpi	r24, 0x6F	; 111
 216:	11 f4       	brne	.+4      	; 0x21c <main+0x118>
      hbval=254;
 218:	49 82       	std	Y+1, r4	; 0x01
      hbdelta=0;
 21a:	1a 82       	std	Y+2, r1	; 0x02
    }
    OSCCAL = osc;
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	81 bf       	out	0x31, r24	; 49
    DBG1(0x11,&osc,1);
 220:	81 e1       	ldi	r24, 0x11	; 17
 222:	b6 01       	movw	r22, r12
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	1b df       	rcall	.-458    	; 0x5e <odDebug>
    DBG1(0x12,&hbval,1);
 228:	82 e1       	ldi	r24, 0x12	; 18
 22a:	b7 01       	movw	r22, r14
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	17 df       	rcall	.-466    	; 0x5e <odDebug>
    DBG1(0x13,&hbdelta,1);
 230:	83 e1       	ldi	r24, 0x13	; 19
 232:	b8 01       	movw	r22, r16
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	13 df       	rcall	.-474    	; 0x5e <odDebug>
 238:	b0 cf       	rjmp	.-160    	; 0x19a <main+0x96>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
